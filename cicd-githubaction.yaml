name: Build and Deploy to Staging and Production

on:
  push:
    branches:
      - staging
      - production

env:
  AWS_REGION: us-east-1
  AWS_ECR_URL: 059920143366.dkr.ecr.us-east-1.amazonaws.com  # Update with your specific AWS ECR URL

jobs:
  build:
    runs-on: ubuntu-latest

    container:
      image: public.ecr.aws/g4a0y2u8/node-awscli-docker:latest-v20 # Using your specified image
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check Node.js version
        run: node -v

      - name: Install dependencies and build (report-backend)
        run: |
          cd packages/report-backend
          npm ci
          CI=false npm run build

      - name: Wait for Docker to be ready
        run: |
          while true; do
            sleep 1
            echo "try docker info"
            docker info && break
          done
          
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.AWS_ECR_URL }} 

      - name: Build and push Docker image
        run: |
          IMAGE_NAME_DEV="node-report-dev"
          IMAGE_NAME_PROD="node-report-prod"
          
          # Handle branch detection properly for GitHub Actions
          if [ "${GITHUB_REF##*/}" = "staging" ]; then
            IMAGE_NAME=$IMAGE_NAME_DEV
            TAG="staging-${{ github.run_number }}"  # Creates a staging tag
          elif [ "${GITHUB_REF##*/}" = "production" ]; then
            IMAGE_NAME=$IMAGE_NAME_PROD
            TAG="prod-${{ github.run_number }}"  # Creates a production tag
          else
            echo "Unsupported branch: ${{ github.ref_name }}"
            exit 1
          fi

          # Docker build and push
          docker build --build-arg channel=${{ github.ref_name }} --build-arg CI_PIPELINE_ID=${{ github.run_number }} -f ./Dockerfile.dev -t $IMAGE_NAME .
          docker tag $IMAGE_NAME ${{ env.AWS_ECR_URL }}/$IMAGE_NAME:$TAG
          docker push ${{ env.AWS_ECR_URL }}/$IMAGE_NAME:$TAG


  deploy-staging:
    runs-on: ubuntu-latest
    if: github.ref_name == 'staging'
    needs: build
    env:
      IMAGE_NAME: node-report-dev
      IMAGE_TAG: staging-${{ github.run_number }}
      IMAGE_PATTERN: "staging*"
      DB_HOST: "qa-new-hasura.cyq2mv6upiup.us-east-2.rds.amazonaws.com"
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

    steps:
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"

      - name: Deploy to Staging Environment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws configure set default.region ${{ env.AWS_REGION }}

            sudo docker stop node-report || true
            sudo docker rm node-report || true
            sudo docker rmi -f $(sudo docker images -q '${{ env.AWS_ECR_URL }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_PATTERN }}')
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | sudo docker login --username AWS --password-stdin ${{ env.AWS_ECR_URL }}
            sudo docker pull ${{ env.AWS_ECR_URL }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

            sudo docker run -d \
              --name node-report \
              --network host \
              -p 5000:5000 \
              -e DB_HOST="${DB_HOST}" \
              -e DB_USER="${{ secrets.DB_USER }}" \
              -e DB_USERNAME="${{ secrets.DB_USER }}" \
              -e DB_PASSWORD="${DB_PASSWORD}" \
              -e DASHBOARD_SERVICE_HOST="react-test.nanoheal.work" \
              -e DASHBOARD_wsurl="wss://react-testnode.nanoheal.work:443/hfnws" \
              -e DASHBOARD_reportingurl="react-testreport.nanoheal.work/" \
              -e USE_NODEREPORT="true" \
              -e REDIS_HOST="localhost" \
              -e REDIS_PORT="6379" \
              -e REDIS_PASSWORD="YourManualPasswordHere" \
              ${{ env.AWS_ECR_URL }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

  deploy-production:
    runs-on: ubuntu-latest
    if: github.ref_name == 'production'
    needs: build
    env:
      IMAGE_NAME: node-report-prod
      IMAGE_TAG: prod-${{ github.run_number }}
      IMAGE_PATTERN: "prod*"
      DB_HOST: "demo-hasura-db.cyq2mv6upiup.us-east-2.rds.amazonaws.com"
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_USER: "weblog"

    steps:
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-west-1"

      - name: Deploy to Production Environment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST_PROD }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws configure set default.region ${{ env.AWS_REGION }}

            sudo docker stop node-report || true
            sudo docker rm node-report || true
            sudo docker rmi -f $(sudo docker images -q '${{ env.AWS_ECR_URL }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_PATTERN }}')
            aws ecr get-login-password --region us-east-1 | sudo docker login --username AWS --password-stdin ${{ env.AWS_ECR_URL }}
            sudo docker pull ${{ env.AWS_ECR_URL }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

            sudo docker run -d \
              --name node-report \
              --network host \
              -p 5000:5000 \
              -e DB_HOST="${DB_HOST}" \
              -e DB_USER="${{ secrets.DB_USER }}" \
              -e DB_USERNAME="${{ secrets.DB_USER }}" \
              -e DB_PASSWORD="${DB_PASSWORD}" \
              -e DASHBOARD_SERVICE_HOST="demo.nanoheal.work" \
              -e DASHBOARD_wsurl="wss://demonode.nanoheal.work:443/hfnws" \
              -e DASHBOARD_reportingurl="demoreport.nanoheal.work/" \
              -e USE_NODEREPORT="true" \
              -e REDIS_HOST="localhost" \
              -e REDIS_PORT="6379" \
              -e REDIS_PASSWORD="YourManualPasswordHere" \
              ${{ env.AWS_ECR_URL }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
